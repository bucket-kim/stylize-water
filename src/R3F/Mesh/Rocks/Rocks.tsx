/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/rocks.glb -S -T -t 
Files: ./public/models/rocks.glb [3.34KB] > /Users/briankim/Documents/GitHub/stylize-water/rocks-transformed.glb [3.34KB] (0%)
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { JSX, useEffect, useMemo, useRef } from "react";
import CustomShaderMaterial from "three-custom-shader-material";
import vertexShader from "./Shader/vertex.glsl?raw";
import fragmentShader from "./Shader/fragment.glsl?raw";
import { waterStore } from "../../../States/waterStore";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    rocks: THREE.Mesh;
  };
  materials: {};
};

const Rocks = (props: JSX.IntrinsicElements["group"]) => {
  const materialRef = useRef<any>(null);

  const { nodes } = useGLTF("/models/rocks.glb") as unknown as GLTFResult;

  const waterLevel = waterStore((state) => state.waterLevel);
  const waveSpeed = waterStore((state) => state.waveSpeed);
  const foamDepth = waterStore((state) => state.foamDepth);
  const waveAmplitude = waterStore((state) => state.waveAmplitude);

  const { ROCK_BASE_COLOR, MOSS_BASE_COLOR } = useControls("Rocks", {
    ROCK_BASE_COLOR: { value: "#b2baa0", label: "Color" },
    MOSS_BASE_COLOR: { value: "#8aa72d", label: "Moss" },
  });

  const MOSS_COLOR = useMemo(() => {
    return new THREE.Color(MOSS_BASE_COLOR);
  }, [MOSS_BASE_COLOR]);

  useEffect(() => {
    if (!materialRef.current) return;

    materialRef.current.uniforms.uMossColor.value = MOSS_COLOR;
    materialRef.current.uniforms.uWaterLevel.value = waterLevel;
    materialRef.current.uniforms.uWaveSpeed.value = waveSpeed;
    materialRef.current.uniforms.uWaveAmplitude.value = waveAmplitude;
    materialRef.current.uniforms.uFoamDepth.value = foamDepth;
  }, [MOSS_COLOR, waterLevel, waveSpeed, waveAmplitude, foamDepth]);

  useFrame(({ clock }) => {
    if (!materialRef.current) return;
    materialRef.current.uniforms.uTime.value = clock.getElapsedTime();
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.rocks.geometry} castShadow receiveShadow>
        <CustomShaderMaterial
          ref={materialRef}
          baseMaterial={THREE.MeshStandardMaterial}
          color={ROCK_BASE_COLOR}
          vertexShader={vertexShader}
          fragmentShader={fragmentShader}
          uniforms={{
            uTime: { value: 0 },
            uMossColor: { value: MOSS_COLOR },
            uWaterLevel: { value: waterLevel },
            uWaveSpeed: { value: waveSpeed },
            uFoamDepth: { value: foamDepth },
            uWaveAmplitude: { value: waveAmplitude },
          }}
        />
      </mesh>
    </group>
  );
};

export default Rocks;

useGLTF.preload("/models/rocks.glb");
